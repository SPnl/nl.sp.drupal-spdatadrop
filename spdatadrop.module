<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_init().
 */
function spdatadrop_init() {
  module_load_include("inc", "spdatadrop", "spdatadrop.processing");
  module_load_include("inc", "spdatadrop", "spdatadrop.settings");
}

/**
 * Implements hook_menu().
 */
function spdatadrop_menu() {
  $items = array();

  $items['admin/config/sp/spdatadrop'] = array(
    'title' => 'SP Datadrop',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'spdatadrop_overview',
    'file' => 'spdatadrop.admin.inc',
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/spdatadrop/overview'] = array(
    'title' => 'Stats',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'sprbs_access_check',
    'weight' => '0',
  );

  $items['admin/config/sp/spdatadrop/unsubscriptions'] = array(
    'title' => 'Uitschrijvingen',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'spdatadrop_unsubscriptions',
    'file' => 'spdatadrop.admin.inc',
    'access callback' => 'sprbs_access_check',
    'weight' => '1',
  );

  $items['admin/config/sp/spdatadrop/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_LOCAL_TASK,
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('spdatadrop_settings_form'),
    'file' => 'spdatadrop.admin.inc',
    'access callback' => 'sprbs_access_check',
    'weight' => '2',
  );

  $items['spdatadrop'] = array(
    'title' => 'Datadrop',
    'type' => MENU_CALLBACK,
    'page callback' => 'spdatadrop_process_post_data',
    'access arguments' => array('access content'),
  );

  $cron_key = variable_get('cron_key');
  $items['spdatadrop/' . $cron_key] = array(
    'title' => 'SP Datadrop cron',
    'type' => MENU_CALLBACK,
    'page callback' => 'spdatadrop_customcron',
    'access arguments' => array('access content'),
  );

  $items['afmelden/%'] = array(
    'title' => 'Afmelden',
    'type' => MENU_NORMAL_ITEM,
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('spdatadrop_unsubscribe_form', 1),
    'file' => 'spdatadrop.unsubscribe.inc',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Syncs not yet synced webform submissions.
 */
function spdatadrop_customcron() {
  $number = variable_get('spdatadrop_cron_number', 0);
  $number_pushed = 0;
  // First sync all form submissions.
  $sync_ids = spdatadrop_sync_submissions($number);
  $to_go = $number - count($sync_ids);
  if ($to_go > 0) {
    $number_pushed = spdatadrop_unsubscribe_submissions($to_go);
  }
  // Process callbacks.
  spdatadrop_process_callbacks($number);
}

/**
 * Mail.
 */
function spdatadrop_mail($key, &$message, $params) {
  switch ($key) {
    case 'unsubscribed':
      $message['subject'] = 'We hebben u uitgeschreven';
      $message['body'][] = '<p>Beste ' . $params['contact_data']['display_name'] . ',</p><p>Bedankt het doorgeven van uw communicatiewensen.</p>';
      if (!empty($params['unsubscription_data']->unsubscribe)) {
        $message['body'][] = '<p>We hebben u uitgeschreven voor: ' . $params['unsubscription_data']->source_title . '.</p>';
        $prefix = 'Daarnaast zorgen we ervoor dat ';
      }
      else {
        $prefix = 'We zorgen ervoor dat ';
      }
      $lines = array();
      if (!empty($params['unsubscription_data']->is_opt_out)) {
        $lines[] = 'u geen e-mails meer van ons ontvangt';
      }
      if (!empty($params['unsubscription_data']->do_not_phone)) {
        $lines[] = 'we u niet meer bellen';
      }
      if (!empty($params['unsubscription_data']->do_not_sms)) {
        $lines[] = 'we geen sms\'jes meer sturen';
      }
      if (count($lines) > 1) {
        $last_line = array_pop($lines);
        $last_line = ' en ' . $last_line;
        $line = implode(', ', $lines) . $last_line;
      }
      else {
        $line = array_pop($lines);
      }
      if (!empty($line)) {
        $line = '<p>' . $prefix . $line . '.</p>';
        $message['body'][] = $line;
      }
      $message['body'][] = '<p>Met vriendelijke groet,<br/>SP</p>';
      break;

    case 'error':
      $message['subject'] = 'Datadrop fout';
      $message['body'][] = format_string($params['content'], $params['data']);
      break;

  }
}

/**
 * Unsubscribe submissions.
 */
function spdatadrop_unsubscribe_submissions($number) {
  $number_pushed = 0;
  $states = spdatadrop_get_states();
  $unsubscriptions_query = "SELECT us.id id, us.secret secret, us.state state, unsubscribe, is_opt_out, do_not_phone, do_not_sms, contact_id, submission_data, submission_id, source_title, source_domain FROM {spdatadrop_unsubscribe} us INNER JOIN {spdatadrop_syncstate} ss ON us.secret = ss.secret WHERE ss.secret IS NOT NULL AND us.state = 0 AND ss.state = 1 LIMIT " . $number;
  $unsubscribe_items = db_query($unsubscriptions_query);
  if ($unsubscribe_items->rowCount()) {
    watchdog('spdatadrop', 'Unsubscribing contacts.');
    foreach ($unsubscribe_items as $unsubscribe_item) {
      // Process single unsubscription.
      $secret = $unsubscribe_item->secret;
      $contact_id = $unsubscribe_item->contact_id;

      $unsubscribe_data = array();
      $debug_info = array();

      $number_pushed++;
      $unsubscribe_data['contact_id'] = $contact_id;

      // Add debug info.
      $debug_info['unsubscribe'] = $unsubscribe_item;
      // Remove contact from synced groups in CiviCRM.
      if ($unsubscribe_item->unsubscribe) {
        $submission_data = json_decode($unsubscribe_item->submission_data, TRUE);
        if (!empty($submission_data['groups'])) {
          $unsubscribe_data['remove_groups'] = $submission_data['groups'];
        }
      }
      // Process is_opt_out, do_not_phone and do_not_sms.
      if ($unsubscribe_item->is_opt_out) {
        $unsubscribe_data['is_opt_out'] = TRUE;
      }
      if ($unsubscribe_item->do_not_phone) {
        $unsubscribe_data['do_not_phone'] = TRUE;
      }
      if ($unsubscribe_item->do_not_sms) {
        $unsubscribe_data['do_not_sms'] = TRUE;
      }
      // Push unsubscribe data.
      $result = spcivipush_push_contact($unsubscribe_data, $debug_info);
      $error = FALSE;
      if ($result === FALSE) {
        spdatadrop_store_unsubscribe_state($unsubscribe_item->id, 'error');
        $error = TRUE;
      }
      elseif ($result === 'insufficient data') {
        spdatadrop_store_unsubscribe_state($unsubscribe_item->id, 'insufficient data');
        $error = TRUE;
      }
      elseif ($result === 'contact id not found') {
        spdatadrop_store_unsubscribe_state($unsubscribe_item->id, 'contact id not found');
        $error = TRUE;
      }
      else {
        spdatadrop_store_unsubscribe_state($unsubscribe_item->id, 'synced');
        // Send mail.
        $spcivi = \SPCivi::getInstance();
        $params = array(
          'id' => $contact_id,
        );
        $contact_data = $spcivi->api('Contact', 'getsingle', $params);
        if (empty($contact_data['is_error'])) {
          if (!empty($contact_data['email'])) {
            $params = array(
              'contact_data' => $contact_data,
              'unsubscription_data' => $unsubscribe_item,
            );
            $message = drupal_mail('spdatadrop', 'unsubscribed', $contact_data['email'], language_default(), $params, 'webmaster@sp.nl');
          }
        }
      }
    }
    watchdog('spdatadrop', 'Finished unsubscribing contact.');
  }
  return $number_pushed;
}

/**
 * Sync submissions.
 */
function spdatadrop_sync_submissions($number) {
  $sync_ids = array();
  $states = spdatadrop_get_states();
  // Sync not yet synced webform submissions.
  $sync_is_running = variable_get('spdatadrop_sync_is_running', FALSE);
  $sync_start_time = variable_get('spdatadrop_sync_start_time', 0);
  if ($sync_is_running === FALSE || time() - $sync_start_time > 600) {
    set_time_limit(120);
    // Get submissions to sync.
    if ($number > 0) {
      variable_set('spdatadrop_sync_is_running', TRUE);
      variable_set('spdatadrop_sync_start_time', time());
      $sync_ids = spdatadrop_push_contacts($number);
      variable_set('spdatadrop_sync_is_running', FALSE);
    }
  }
  else {
    watchdog('spdatadrop', 'Sync not started, sync is already running.');
    drupal_set_message('Sync not started, datadrop sync is already running.', 'warning');
  }
  return $sync_ids;
}

/**
 * Process data result.
 */
function spdatadrop_push_contact_process_result($id, $result) {
  $error = FALSE;
  if ($result === FALSE) {
    spdatadrop_store_submission_sync_state($id, 'error');
    $error = TRUE;
  }
  elseif ($result === 'insufficient data') {
    spdatadrop_store_submission_sync_state($id, 'insufficient data');
    $error = TRUE;
  }
  elseif ($result === 'contact id not found') {
    spdatadrop_store_submission_sync_state($id, 'contact id not found');
    $error = TRUE;
  }
  else {
    spdatadrop_store_submission_sync_state($id, 'synced');
  }
  return $error;
}

/**
 * Stores sync state.
 */
function spdatadrop_store_submission_sync_state($id, $state) {
  $states = spdatadrop_get_states();
  if (!empty($id) && isset($states[$state])) {
    $new_state = $states[$state];
    db_update('spdatadrop_syncstate')
      ->fields(array(
        'state' => $new_state,
      ))
      ->condition('id', $id)
      ->execute();
  }
}

/**
 * Stores unsubscribe state.
 */
function spdatadrop_store_unsubscribe_state($id, $state) {
  $states = spdatadrop_get_states();
  if (!empty($id) && isset($states[$state])) {
    $new_state = $states[$state];
    db_update('spdatadrop_unsubscribe')
      ->fields(array(
        'state' => $new_state,
      ))
      ->condition('id', $id)
      ->execute();
  }
}

/**
 * Process data from post.
 */
function spdatadrop_process_post_data() {
  $ip_address = ip_address();
  $allowed_ips = variable_get('spdatadrop_allowed_ips', '');
  if (strpos($allowed_ips, $ip_address) !== FALSE) {
    $secret = variable_get('spdatadrop_secret', NULL);
    if (empty($secret) || $_POST['secret'] !== $secret) {
      watchdog('spdatadrop', 'Unauthorized spdatadrop.', array(), WATCHDOG_WARNING);
      drupal_add_http_header('Status', '401 Unauthorized');
    }
    else {
      // Store data in database.
      if (isset($_POST['submission_data'])) {
        $fields = array();
        // Add submission data.
        $fields['submission_data'] = json_encode($_POST['submission_data']);
        // Add source data.
        if (isset($_POST['source_data'])) {
          $source_fields = array(
            'source_domain',
            'source_title',
            'source_id',
            'source_ip',
            'submission_id',
            'secret',
          );
          foreach ($source_fields as $source_field) {
            if (isset($_POST['source_data'][$source_field])) {
              $fields[$source_field] = $_POST['source_data'][$source_field];
            }
          }
        }
        // Add debug info.
        if (isset($_POST['debug_info'])) {
          $fields['debug_info'] = json_encode($_POST['debug_info']);
        }
        // Add callback_path.
        if (!empty($_POST['callback_path'])) {
          $fields['callback_path'] = $_POST['callback_path'];
        }
        // Add date.
        $fields['date'] = time();
        // Add state.
        $fields['state'] = 0;
        $fields['callback_state'] = 0;
        db_insert('spdatadrop_syncstate')
          ->fields($fields)
          ->execute();
        // Log.
        watchdog('spdatadrop', 'Queued submission id @sid from @domain (@title).', array(
          '@sid' => $_POST['source_data']['submission_id'],
          '@title' => $_POST['source_data']['source_title'],
          '@domain' => $_POST['source_data']['source_domain'],
        ));
      }
      else {
        watchdog('spdatadrop', 'Missing data spdatadrop.', array(), WATCHDOG_WARNING);
        drupal_add_http_header('Status', '400 Bad request');
      }
      return;
    }
  }
  else {
    watchdog('spdatadrop', 'Unauthorized datadrop from @ip_address.', array('@ip_address' => $ip_address));
  }
}

/**
 * Push contacts to civicrm.
 */
function spdatadrop_push_contacts($number = 1) {
  $contacts = array();
  $sync_ids = array();
  $query = "SELECT * FROM {spdatadrop_syncstate} WHERE state = 0 ORDER BY id ASC LIMIT " . $number;
  $result = db_query($query);
  if ($result && $result->rowCount()) {
    watchdog('spdatadrop', 'Pushing contacts to CiviCRM');
    while ($row = $result->fetchAssoc()) {
      $contact_id = spdatadrop_push_contact($row);
      if (!empty($contact_id)) {
        $sync_ids[] = $contact_id;
      }
    }
    watchdog('spdatadrop', 'Finished pushing contacts to CiviCRM');
  }
  return $sync_ids;
}

/**
 * Push contact to CiviCRM.
 */
function spdatadrop_push_contact($spdatadrop_syncstate) {
  watchdog('spdatadrop', 'Processing sync id. @id', array('@id' => $spdatadrop_syncstate['submission_id']));
  $submission_data = json_decode($spdatadrop_syncstate['submission_data'], TRUE);
  $source_data = array(
    'source_domain' => $spdatadrop_syncstate['source_domain'],
    'source_title' => $spdatadrop_syncstate['source_title'],
    'source_id' => $spdatadrop_syncstate['source_id'],
    'submission_id' => $spdatadrop_syncstate['submission_id'],
  );
  $debug_info = array(
    'debug_info' => json_decode($spdatadrop_syncstate['debug_info'], TRUE),
    'source_data' => $source_data,
  );
  $push_result = spcivipush_push_contact($submission_data, $debug_info);
  $error = spdatadrop_push_contact_process_result($spdatadrop_syncstate['id'], $push_result);
  if (!$error) {
    // Store contact id.
    db_update('spdatadrop_syncstate')
      ->fields(array(
        'contact_id' => $push_result,
      ))
      ->condition('id', $spdatadrop_syncstate['id'])
      ->execute();
    watchdog('spdatadrop', 'Pushed submission id @sid from @domain (@title).', array(
      '@sid' => $spdatadrop_syncstate['submission_id'],
      '@title' => $spdatadrop_syncstate['source_title'],
      '@domain' => $spdatadrop_syncstate['source_domain'],
    ));
    watchdog('spdatadrop', 'Finished processing sync id. @id', array('@id' => $spdatadrop_syncstate['submission_id']));
    return $push_result;
  }
  else {
    $error_message = array(
      'content' => 'Error pushing submission id @sid from @domain (@title).',
      'data' => array(
        '@sid' => $spdatadrop_syncstate['submission_id'],
        '@title' => $spdatadrop_syncstate['source_title'],
        '@domain' => $spdatadrop_syncstate['source_domain'],
      ),
    );
    watchdog('spdatadrop', $error_message['content'], $error_message['data']);
    $message = drupal_mail('spdatadrop', 'error', 'webmaster@sp.nl', language_default(), $error_message, 'webmaster@sp.nl');
  }
}

/**
 * Return state names.
 */
function spdatadrop_get_states() {
  $states = array(
    'unprocessed' => '0',
    'synced' => '1',
    'error' => '2',
    'insufficient data' => '3',
    'contact id not found' => '4',
  );
  return $states;
}

/**
 * Return callback state names.
 */
function spdatadrop_get_callback_states() {
  $states = array(
    'unprocessed' => '0',
    'processed' => '1',
    'error' => '2',
    'no callback' => '3',
  );
  return $states;
}

/**
 * Return contact id.
 */
function spdatadrop_process_callbacks($max) {
  // Get callbacks.
  $submissions = db_select('spdatadrop_syncstate', 's')
    ->fields('s')
    ->condition('state', 1)
    ->condition('callback_path', '', '<>')
    ->condition('callback_state', 0)
    ->range(0, $max)
    ->execute()
    ->fetchAll();

  foreach ($submissions as $submission) {

    $url = 'https://' . $submission->source_domain . '/' . $submission->callback_path;
    $secret = variable_get('spdatadrop_secret');
    $source_data = array(
      'source_title' => $submission->source_title,
      'source_id' => $submission->source_id,
      'submission_id' => $submission->submission_id,
    );

    $data_to_send = array(
      'source_data' => $source_data,
      'submission_data' => json_decode($submission->submission_data, TRUE),
      'secret' => $secret,
      'contact_id' => $submission->contact_id,
    );
    $request_body = http_build_query($data_to_send);
    $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
    $options = array(
      'method' => 'POST',
      'data' => $request_body,
      'headers' => $headers,
    );
    $result = drupal_http_request($url, $options);
    switch ($result->code) {
      case '200':
        db_update('spdatadrop_syncstate')
          ->fields(array(
            'callback_state' => 1,
          ))
          ->condition('id', $submission->id)
          ->execute();
        watchdog('spwebformsync', 'Processed callback for submission @sid.', array('@sid' => $submission->id));
        break;

      default:
        db_update('spdatadrop_syncstate')
          ->fields(array(
            'callback_state' => 3,
          ))
          ->condition('id', $submission->id)
          ->execute();
        $message_data = array(
          'url' => $url,
          'headers' => $headers,
          'post data' => $options,
          'result' => $result,
        );
        watchdog('spwebformsync', 'Error pushing data to spdatadrop location: <pre>@message_data</pre>', array('@message_data' => print_r($message_data, TRUE)), WATCHDOG_ERROR);
        return FALSE;
    }
  }
}
